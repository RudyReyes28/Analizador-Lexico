/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package com.rudyreyes.analizadorlexico.vista;

import com.rudyreyes.analizadorlexico.modelo.estructuraSintactica.EstructuraSintactica;
import com.rudyreyes.analizadorlexico.modelo.estructuraSintactica.MetodoLlamado;
import com.rudyreyes.analizadorlexico.modelo.token.Token;
import java.util.List;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author rudyo
 */
public class VentanaReportesMetodos extends javax.swing.JDialog {
    private List<EstructuraSintactica> sintaxis;
    /**
     * Creates new form VentanaReportesMetodos
     */
    public VentanaReportesMetodos(java.awt.Frame parent, boolean modal, List<EstructuraSintactica> sintaxis) {
        super(parent, modal);
        this.sintaxis = sintaxis;
        initComponents();
        
        llenarDeclaracionDeMetodos();
        llenarInvocacionDeMetodos();
        
    }
    private void llenarDeclaracionDeMetodos() {
        DefaultTableModel model = (DefaultTableModel) tablaDeclaracionMetodos.getModel();
        for(EstructuraSintactica es: sintaxis){
            if(es.isEstructuraValida()){
                if(es.getNombreEstructura().equals("Declaracion Metodo")){
                    llenarTablaDeclaracionMetodos(es, model);
                }
            }
        }

    }
    
    private void llenarTablaDeclaracionMetodos(EstructuraSintactica es,DefaultTableModel model ){
        String nombreMetodo = es.getTokensEstructura().get(1).getValor();
        int linea = es.getTokensEstructura().get(1).getLinea();
        int columna = es.getTokensEstructura().get(1).getColumna();
        String parametros = "";
        
        for(int i = 3; i < es.getTokensEstructura().size(); i++){
            if(es.getTokensEstructura().get(i).getValor().equals(")")){
                break;
            }
            parametros += es.getTokensEstructura().get(i).getValor()+" ";
        }
        
        llenarTabla(nombreMetodo, parametros, linea, columna, model);
    }
    
    private void llenarInvocacionDeMetodos() {
        DefaultTableModel model = (DefaultTableModel) tablaInvocacionMetodos.getModel();
        for(EstructuraSintactica es: sintaxis){
            if(es.isEstructuraValida()){
                if(es.getNombreEstructura().equals("Llamar Metodo")){
                    llenarTablaInvocacionDeMetodos(es.getTokensEstructura(), model);
                }else if(es.isHayMetodo()){
                    for(MetodoLlamado metodos: es.getMetodosLlamados()){
                        llenarTablaInvocacionDeMetodos(metodos.getMetodo(), model);
                    }
                }
            }
        }
    }
    
    private void llenarTablaInvocacionDeMetodos(List<Token> tokens , DefaultTableModel model){
        String nombreMetodo = tokens.get(0).getValor();
        int linea = tokens.get(0).getLinea();
        int columna = tokens.get(0).getColumna();
        
        String parametros = "";
        
        for(int i = 2; i < tokens.size(); i++){
            if(tokens.get(i).getValor().equals(")")){
                break;
            }
            parametros += tokens.get(i).getValor()+" ";
        }
        
        llenarTabla(nombreMetodo, parametros, linea, columna, model);
    }
    
    private static void llenarTabla(String nombre, String parametros, int linea, int columna, DefaultTableModel model){
        model.addRow(new Object[]{
                   nombre,
                   parametros,
                   linea,
                   columna
                });
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaDeclaracionMetodos = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaInvocacionMetodos = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Reportes de Metodos");

        jPanel1.setBackground(new java.awt.Color(153, 255, 204));

        jLabel1.setFont(new java.awt.Font("Comic Sans MS", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Reportes de Metodos");

        tablaDeclaracionMetodos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre", "Parametros", "Linea", "Columna"
            }
        ));
        jScrollPane1.setViewportView(tablaDeclaracionMetodos);

        jLabel2.setFont(new java.awt.Font("Comic Sans MS", 1, 16)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Funciones o Metodos");

        tablaInvocacionMetodos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre", "Parametros", "Linea", "Columna"
            }
        ));
        jScrollPane2.setViewportView(tablaInvocacionMetodos);

        jLabel3.setFont(new java.awt.Font("Comic Sans MS", 1, 16)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Metodos o Funciones Invocadas");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 368, Short.MAX_VALUE))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel1)
                .addGap(25, 25, 25)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap(68, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tablaDeclaracionMetodos;
    private javax.swing.JTable tablaInvocacionMetodos;
    // End of variables declaration//GEN-END:variables

    
}
